worker_processes  1;

error_log  logs/error.log  debug;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

events {
    worker_connections 1024;
}

http {
    upstream api_server{
        server 127.0.0.1:8081;
    }

    init_by_lua '
         cjson = require("cjson") -- cjson is a global variable
        _utils = require("luacode/utils") -- _utils is a global utils
    ';

    map $args $foo {
        default     0;
        debug       1;
    }

    server {
        # Enable need body data
        lua_need_request_body on;

        listen 8080;

        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>Hello, Nginx</p>")
            ';
        }

         # Reload Partner Plugins
        location /reload {
            access_by_lua_file luacode/reload.lua;
        }

        # By each parner
#        location ~ /api/admin/partners/(.*)/(.*)$ {
#            set $partner $1;
#            access_by_lua_file luacode/$partner.lua;
#        }

        # By each parner
        location ~ /api/admin/partners/(.*)/(.*)$ {
            set $partner $1;
            access_by_lua_file luacode/core.lua;  
        }
        
        
        # proxy pass for internal api server
        location ~ /internal/admin/partners/general/(.*).*$ {
           proxy_pass http://api_server;
        }
        
    }

     server {
        # Enable need body data
        lua_need_request_body on;
        listen    8081;

        # Mock request for internal partner APIs 
        location /internal/admin/partners/general/userProvision {
            #internal;
            if ( $request_method !~ ^(POST)$ ) {
                return 405;
            }
            default_type 'application/json';
            content_by_lua_file luacode/partner-userProvision.lua;            
        }
        location /internal/admin/partners/general/userActivation {
            #internal;
            if ( $request_method !~ ^(POST)$ ) {
                return 405;
            }
            default_type 'application/json';
            content_by_lua_file luacode/partner-userActivation.lua;            
        }
    }
}